name: 'Sonar Scan for .NET'
description: 'Run Sonar SAST analysis (SonarCloud or SonarQube) on .NET projects with code quality and security insights'

inputs:
  sonar_token:
    description: 'Sonar authentication token'
    required: true
  sonar_host_url:
    description: 'Sonar server URL (default: SonarCloud)'
    required: false
    default: 'https://sonarcloud.io'
  sonar_organization:
    description: 'SonarCloud organization name (only for SonarCloud)'
    required: false
    default: ''
  sonar_project_key:
    description: 'Sonar project key'
    required: true
  dotnet_version:
    description: '.NET SDK version'
    required: false
    default: '8.0'
  solution_path:
    description: 'Path to .NET solution or project'
    required: false
    default: 'src'
  coverage_exclusions:
    description: 'Paths to exclude from coverage (comma-separated)'
    required: false
    default: '**/Program.cs,**/Startup.cs,**/*Tests/**'
  skip_analysis:
    description: 'Skip analysis (for testing)'
    required: false
    default: 'false'

outputs:
  quality_gate_status:
    description: 'Quality Gate status (PASSED/FAILED/WARN/NONE)'
    value: ${{ steps.sonar-end.outputs.quality_gate_status }}
  sonar_type:
    description: 'Sonar type used (SonarCloud or SonarQube)'
    value: ${{ steps.detect-sonar-type.outputs.sonar_type }}

runs:
  using: 'composite'
  steps:
    - name: 🔍 Detect Sonar Type
      id: detect-sonar-type
      shell: bash
      run: |
        if [[ "${{ inputs.sonar_host_url }}" == "https://sonarcloud.io" ]]; then
          echo "sonar_type=SonarCloud" >> $GITHUB_OUTPUT
          echo "is_sonarcloud=true" >> $GITHUB_OUTPUT
          echo "✅ Detected: SonarCloud"
        else
          echo "sonar_type=SonarQube" >> $GITHUB_OUTPUT
          echo "is_sonarcloud=false" >> $GITHUB_OUTPUT
          echo "✅ Detected: SonarQube (self-hosted)"
          echo "   Server: ${{ inputs.sonar_host_url }}"
        fi

    - name: 🔍 Check if Sonar analysis should run
      id: check-skip
      shell: bash
      run: |
        if [[ "${{ inputs.skip_analysis }}" == "true" ]]; then
          echo "⏭️  Skipping Sonar analysis (skip_analysis=true)"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: 🔧 Setup .NET SDK
      if: steps.check-skip.outputs.skip == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet_version }}

    - name: 📦 Install SonarScanner for .NET
      if: steps.check-skip.outputs.skip == 'false'
      shell: bash
      run: |
        echo "📦 Installing SonarScanner for .NET..."
        dotnet tool install --global dotnet-sonarscanner --version 6.0.0 || dotnet tool update --global dotnet-sonarscanner
        echo "✅ SonarScanner installed"

    - name: 📦 Install Coverage Tools
      if: steps.check-skip.outputs.skip == 'false'
      shell: bash
      run: |
        echo "📦 Installing dotnet-coverage..."
        dotnet tool install --global dotnet-coverage || dotnet tool update --global dotnet-coverage
        echo "✅ Coverage tools installed"

    - name: 🔄 Restore Dependencies
      if: steps.check-skip.outputs.skip == 'false'
      shell: bash
      run: |
        echo "🔄 Restoring NuGet packages..."
        dotnet restore ${{ inputs.solution_path }}
        echo "✅ Dependencies restored"

    - name: 🚀 Begin Sonar Analysis (SonarCloud)
      if: steps.check-skip.outputs.skip == 'false' && steps.detect-sonar-type.outputs.is_sonarcloud == 'true'
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      run: |
        echo "🚀 Starting SonarCloud analysis..."

        if [[ -z "${{ inputs.sonar_organization }}" ]]; then
          echo "❌ Error: sonar_organization is required for SonarCloud"
          exit 1
        fi

        dotnet sonarscanner begin \
          /k:"${{ inputs.sonar_project_key }}" \
          /o:"${{ inputs.sonar_organization }}" \
          /d:sonar.host.url="${{ inputs.sonar_host_url }}" \
          /d:sonar.token="${SONAR_TOKEN}" \
          /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" \
          /d:sonar.coverage.exclusions="${{ inputs.coverage_exclusions }}"

        echo "✅ SonarCloud analysis initialized"

    - name: 🚀 Begin Sonar Analysis (SonarQube)
      if: steps.check-skip.outputs.skip == 'false' && steps.detect-sonar-type.outputs.is_sonarcloud == 'false'
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      run: |
        echo "🚀 Starting SonarQube analysis..."
        echo "   Server: ${{ inputs.sonar_host_url }}"

        dotnet sonarscanner begin \
          /k:"${{ inputs.sonar_project_key }}" \
          /d:sonar.host.url="${{ inputs.sonar_host_url }}" \
          /d:sonar.token="${SONAR_TOKEN}" \
          /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" \
          /d:sonar.coverage.exclusions="${{ inputs.coverage_exclusions }}"

        echo "✅ SonarQube analysis initialized"

    - name: 🏗️ Build Solution
      if: steps.check-skip.outputs.skip == 'false'
      shell: bash
      run: |
        echo "🏗️ Building solution..."
        dotnet build ${{ inputs.solution_path }} --configuration Release --no-restore
        echo "✅ Build completed"

    - name: 🧪 Run Tests with Coverage
      if: steps.check-skip.outputs.skip == 'false'
      shell: bash
      run: |
        echo "🧪 Running tests with code coverage..."

        dotnet-coverage collect \
          "dotnet test ${{ inputs.solution_path }} --configuration Release --no-build --verbosity minimal" \
          -f xml \
          -o "coverage.xml"

        echo "✅ Tests completed with coverage"

    - name: 🏁 End Sonar Analysis
      if: steps.check-skip.outputs.skip == 'false'
      id: sonar-end
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
      run: |
        echo "🏁 Finishing Sonar analysis..."

        dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"

        echo "✅ Sonar analysis completed"
        echo "quality_gate_status=NONE" >> $GITHUB_OUTPUT

    - name: 📊 Display Results (SonarCloud)
      if: steps.check-skip.outputs.skip == 'false' && steps.detect-sonar-type.outputs.is_sonarcloud == 'true'
      shell: bash
      run: |
        echo "📊 SonarCloud Analysis Complete"
        echo ""
        echo "🔗 View detailed results at:"
        echo "   https://sonarcloud.io/project/overview?id=${{ inputs.sonar_project_key }}"
        echo ""
        echo "📈 Quality metrics will appear in ~1-2 minutes"

    - name: 📊 Display Results (SonarQube)
      if: steps.check-skip.outputs.skip == 'false' && steps.detect-sonar-type.outputs.is_sonarcloud == 'false'
      shell: bash
      run: |
        echo "📊 SonarQube Analysis Complete"
        echo ""
        echo "🔗 View detailed results at:"
        echo "   ${{ inputs.sonar_host_url }}/dashboard?id=${{ inputs.sonar_project_key }}"
        echo ""
        echo "📈 Quality metrics will appear in ~1-2 minutes"

    - name: ⏭️ Skipped Analysis
      if: steps.check-skip.outputs.skip == 'true'
      shell: bash
      run: |
        echo "⏭️  Sonar analysis was skipped"
        echo "ℹ️  To enable, set skip_analysis=false"

branding:
  icon: 'shield'
  color: 'orange'

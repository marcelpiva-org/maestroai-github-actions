name: 'Build Docker Container'
description: 'Build multi-architecture Docker containers with caching'
inputs:
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  image_name:
    description: 'Container image name'
    required: true
  tag:
    description: 'Container tag'
    required: true
  architecture:
    description: 'Target architecture (amd64, arm64)'
    required: true
  context:
    description: 'Build context'
    required: false
    default: '.'
  dockerfile:
    description: 'Dockerfile path'
    required: false
    default: 'Dockerfile'
  github_token:
    description: 'GitHub token for registry login'
    required: true
  packages_token:
    description: 'Packages token for private NuGet'
    required: false
  registry_username:
    description: 'Registry username (defaults to github.actor)'
    required: false
outputs:
  image:
    description: 'Built image reference'
    value: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}-${{ inputs.architecture }}
runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
        install: true

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username || github.actor }}
        password: ${{ inputs.github_token }}

    - name: Build and push container (with retry)
      shell: bash
      run: |
        MAX_ATTEMPTS=3
        RETRY_WAIT=60
        ATTEMPT=1

        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "üî® Build attempt $ATTEMPT of $MAX_ATTEMPTS for ${{ inputs.architecture }}..."

          if docker buildx build \
            --platform=linux/${{ inputs.architecture }} \
            --file=${{ inputs.dockerfile }} \
            --tag=${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.tag }}-${{ inputs.architecture }} \
            --build-arg=BUILDKIT_INLINE_CACHE=1 \
            --secret=id=github_token,env=PACKAGES_TOKEN \
            --label="org.opencontainers.image.title=${{ inputs.image_name }} (${{ inputs.architecture }})" \
            --label="org.opencontainers.image.description=MaestroAI microservice container" \
            --label="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            --label="org.opencontainers.image.revision=${{ github.sha }}" \
            --label="org.opencontainers.image.version=${{ inputs.tag }}" \
            --cache-from=type=gha,scope=buildkit-${{ inputs.architecture }}-${{ github.ref_name }} \
            --cache-from=type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:buildcache-${{ inputs.architecture }} \
            --cache-to=type=gha,mode=max,scope=buildkit-${{ inputs.architecture }}-${{ github.ref_name }} \
            --cache-to=type=registry,ref=${{ inputs.registry }}/${{ inputs.image_name }}:buildcache-${{ inputs.architecture }},mode=max \
            --push \
            ${{ inputs.context }}; then
            echo "‚úÖ Build successful on attempt $ATTEMPT"
            exit 0
          else
            echo "‚ùå Build failed on attempt $ATTEMPT"
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "‚è≥ Waiting ${RETRY_WAIT}s before retry..."
              sleep $RETRY_WAIT
              ATTEMPT=$((ATTEMPT + 1))
            else
              echo "üí• All $MAX_ATTEMPTS attempts failed"
              exit 1
            fi
          fi
        done
      env:
        PACKAGES_TOKEN: ${{ inputs.packages_token }}
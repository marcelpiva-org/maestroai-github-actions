name: 'Setup .NET Environment'
description: 'Setup .NET SDK with caching and GitHub Packages configuration'
inputs:
  dotnet_version:
    description: 'The .NET version to install'
    required: false
    default: '8.0'
  solution_path:
    description: 'Path to the solution file'
    required: false
    default: 'src'
  packages_token:
    description: 'GitHub Packages token'
    required: false
outputs:
  cache-hit:
    description: 'Cache hit indicator'
    value: ${{ steps.cache.outputs.cache-hit }}
runs:
  using: 'composite'
  steps:
    - name: Setup .NET
      shell: bash
      run: |
        # Check if dotnet is already installed
        if command -v dotnet &> /dev/null; then
          echo "‚úì .NET SDK already installed: $(dotnet --version)"
          echo "DOTNET_ROOT=$(dirname $(dirname $(command -v dotnet)))" >> $GITHUB_ENV
        else
          echo "‚ö† .NET SDK not found, installing..."
          # Install .NET in user directory
          mkdir -p $HOME/.dotnet
          curl -fsSL https://dot.net/v1/dotnet-install.sh -o dotnet-install.sh
          chmod +x dotnet-install.sh
          ./dotnet-install.sh --install-dir $HOME/.dotnet --channel ${{ inputs.dotnet_version }}
          echo "$HOME/.dotnet" >> $GITHUB_PATH
          echo "DOTNET_ROOT=$HOME/.dotnet" >> $GITHUB_ENV
          echo "‚úì .NET SDK installed: $($HOME/.dotnet/dotnet --version)"
        fi

    - name: Cache NuGet packages and build artifacts
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ~/.dotnet/tools
          **/bin
          **/obj
        key: ${{ runner.os }}-dotnet-complete-${{ hashFiles('**/*.csproj', '**/packages.lock.json', '**/*.props', '**/*.targets') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-complete-
          ${{ runner.os }}-dotnet-
          ${{ runner.os }}-nuget-

    - name: Configure GitHub Packages
      if: inputs.packages_token != ''
      shell: bash
      run: |
        # Remove existing github source if it exists
        dotnet nuget remove source github || echo "No existing github source found"

        # Add GitHub Packages source with authentication
        dotnet nuget add source --username ${{ github.actor }} --password ${{ inputs.packages_token }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/marcelpiva-org/index.json"

        # List sources for debugging
        echo "Configured NuGet sources:"
        dotnet nuget list source

    - name: Restore dependencies
      shell: bash
      run: |
        # Find solution file
        SOLUTION_FILE=$(find ${{ inputs.solution_path }} -name "*.sln" 2>/dev/null | head -n 1)

        if [ -z "$SOLUTION_FILE" ]; then
          echo "No solution file found in ${{ inputs.solution_path }}, trying current directory"
          SOLUTION_FILE=$(find . -name "*.sln" 2>/dev/null | head -n 1)
        fi

        if [ -z "$SOLUTION_FILE" ]; then
          echo "‚ö† No solution file found, restoring all projects"
          TARGET="."
        else
          echo "‚úì Found solution: $SOLUTION_FILE"
          TARGET="$SOLUTION_FILE"
        fi

        # Retry logic for GitHub Packages instability
        MAX_RETRIES=3
        RETRY_DELAY=10

        for i in $(seq 1 $MAX_RETRIES); do
          echo "üîÑ Restore attempt $i/$MAX_RETRIES..."

          if dotnet restore "$TARGET" --disable-parallel --force; then
            echo "‚úÖ Restore successful!"
            exit 0
          else
            if [ $i -lt $MAX_RETRIES ]; then
              echo "‚ö† Restore failed, retrying in ${RETRY_DELAY}s..."
              sleep $RETRY_DELAY
              RETRY_DELAY=$((RETRY_DELAY * 2))  # Exponential backoff
            else
              echo "‚ùå Restore failed after $MAX_RETRIES attempts"
              exit 1
            fi
          fi
        done
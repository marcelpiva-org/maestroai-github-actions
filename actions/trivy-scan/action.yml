name: 'Trivy Security Scan'
description: 'Scan Docker images for vulnerabilities using Trivy'
inputs:
  image:
    description: 'Container image to scan (registry/name:tag)'
    required: true
  severity:
    description: 'Severity levels to report (CRITICAL,HIGH,MEDIUM,LOW)'
    required: false
    default: 'CRITICAL,HIGH'
  exit_code:
    description: 'Exit code when vulnerabilities are found (0 = non-blocking)'
    required: false
    default: '0'
  format:
    description: 'Output format (table, json, sarif)'
    required: false
    default: 'sarif'
  output_file:
    description: 'Output file path'
    required: false
    default: 'trivy-results.sarif'
  upload_sarif:
    description: 'Upload SARIF results to GitHub Security'
    required: false
    default: 'true'
  registry_username:
    description: 'Registry username for authentication (optional)'
    required: false
    default: ''
  registry_password:
    description: 'Registry password/token for authentication (optional)'
    required: false
    default: ''
outputs:
  vulnerabilities_found:
    description: 'Number of vulnerabilities found'
    value: ${{ steps.scan.outputs.vulnerabilities }}
runs:
  using: 'composite'
  steps:
    - name: Docker login for private registry
      if: inputs.registry_username != '' && inputs.registry_password != ''
      shell: bash
      run: |
        echo "🔐 Logging into container registry..."
        echo "${{ inputs.registry_password }}" | docker login ghcr.io -u "${{ inputs.registry_username }}" --password-stdin
        echo "✅ Docker login successful"

    - name: Run Trivy vulnerability scanner
      id: scan
      shell: bash
      env:
        TRIVY_USERNAME: ${{ inputs.registry_username }}
        TRIVY_PASSWORD: ${{ inputs.registry_password }}
      run: |
        echo "🔐 Installing Trivy..."

        # Install Trivy to local bin directory
        TRIVY_BIN="${HOME}/.local/bin"
        mkdir -p "$TRIVY_BIN"

        if ! command -v trivy &> /dev/null; then
          echo "Downloading Trivy v0.58.1..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b "$TRIVY_BIN" v0.58.1
          echo "$TRIVY_BIN" >> $GITHUB_PATH
        fi

        # Ensure trivy is in PATH
        export PATH="$TRIVY_BIN:$PATH"

        echo "✅ Trivy installed: $(trivy --version)"

        echo "🔍 Scanning image: ${{ inputs.image }}"

        # Run Trivy scan with credentials via env vars
        trivy image \
          --format ${{ inputs.format }} \
          --output ${{ inputs.output_file }} \
          --severity ${{ inputs.severity }} \
          --exit-code ${{ inputs.exit_code }} \
          --vuln-type os,library \
          --scanners vuln,secret,config \
          --timeout 10m \
          ${{ inputs.image }}

        echo "✅ Trivy scan completed"

    - name: Display scan summary
      shell: bash
      run: |
        echo "🔍 Trivy Scan Results"
        echo "Image: ${{ inputs.image }}"
        echo "Severity: ${{ inputs.severity }}"
        echo "Format: ${{ inputs.format }}"

        if [ "${{ inputs.format }}" = "table" ]; then
          cat ${{ inputs.output_file }} || echo "No vulnerabilities table available"
        else
          echo "📄 Results saved to: ${{ inputs.output_file }}"
        fi

    - name: Upload Trivy results to GitHub Security
      if: inputs.upload_sarif == 'true' && inputs.format == 'sarif'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ inputs.output_file }}
        category: 'trivy-container-scan'

    - name: Upload Trivy results as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ inputs.image }}
        path: ${{ inputs.output_file }}
        retention-days: 30

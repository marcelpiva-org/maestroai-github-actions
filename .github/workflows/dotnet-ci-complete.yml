name: .NET CI Complete (Develop Branch)

# Gatilho: merge em develop
# Objetivo: CI completo + deploy em Dev (<20min)
# Escopo: Unit + Integration Tests, Multi-Arch Build, Full Security Scan, Deploy Dev
# Artefatos: Containers AMD64 + ARM64, Coverage Reports, Security Reports

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Microservice name (e.g., knowledge, chat, agents)'
        required: true
        type: string
      dotnet_version:
        description: '.NET version to use'
        required: false
        type: string
        default: '8.0'
      solution_path:
        description: 'Path to solution file'
        required: false
        type: string
        default: 'src'
      has_tests:
        description: 'Whether the service has tests'
        required: false
        type: boolean
        default: true
      has_integration_tests:
        description: 'Whether the service has integration tests'
        required: false
        type: boolean
        default: false
      enable_contract_tests:
        description: 'Enable contract testing between services'
        required: false
        type: boolean
        default: false
      deploy_to_dev:
        description: 'Automatically deploy to Dev environment'
        required: false
        type: boolean
        default: true
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ${{ inputs.registry }}
  IMAGE_NAME: marcelpiva-org/maestro-${{ inputs.service_name }}-app

jobs:
  # ========================================
  # Job 1: Setup Dependencies
  # ========================================
  setup-dependencies:
    name: 🔧 Setup Dependencies & Tags
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.setup.outputs.cache-hit }}
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning

    - name: 🔧 Setup .NET Environment
      id: setup
      uses: marcelpiva-org/maestroai-github-actions/actions/setup-dotnet@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        solution_path: ${{ inputs.solution_path }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}

    - name: 🏷️ Generate develop tags
      id: tag
      run: |
        SHA_SHORT="${GITHUB_SHA:0:7}"
        TAG="develop-${SHA_SHORT}"
        VERSION="develop-$(date +%Y%m%d)-${SHA_SHORT}"

        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

        echo "📦 Develop tag: ${TAG}"
        echo "📦 Version: ${VERSION}"

  # ========================================
  # Job 2: Build Solution (Parallel)
  # ========================================
  build-solution:
    name: 🏗️ Build Solution
    runs-on: ubuntu-latest
    needs: [setup-dependencies]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET Environment
      uses: marcelpiva-org/maestroai-github-actions/actions/setup-dotnet@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        solution_path: ${{ inputs.solution_path }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}

    - name: 🏗️ Build Solution
      uses: marcelpiva-org/maestroai-github-actions/actions/build-dotnet@main
      with:
        solution_path: ${{ inputs.solution_path }}

  # ========================================
  # Job 3: Unit Tests (Parallel)
  # ========================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    if: ${{ inputs.has_tests }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET Environment
      uses: marcelpiva-org/maestroai-github-actions/actions/setup-dotnet@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        solution_path: ${{ inputs.solution_path }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}

    - name: 🧪 Run Unit Tests with Coverage
      run: |
        echo "🧪 Running unit tests with coverage..."
        dotnet test ${{ inputs.solution_path }} \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

        echo "✅ Unit tests completed"

    - name: 📊 Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.sha }}
        path: ./coverage
        retention-days: 30

  # ========================================
  # Job 4: Integration Tests (If Enabled)
  # ========================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    if: ${{ inputs.has_integration_tests }}

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: maestroai_test
          POSTGRES_USER: maestroai_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET Environment
      uses: marcelpiva-org/maestroai-github-actions/actions/setup-dotnet@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        solution_path: ${{ inputs.solution_path }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}

    - name: 🗄️ Run Database Migrations (Dry Run)
      run: |
        echo "🗄️ Running database migrations in dry-run mode..."
        # Add your migration command here
        echo "✅ Migrations validated"

    - name: 🔗 Run Integration Tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=maestroai_test;Username=maestroai_test;Password=test_password"
        Redis__ConnectionString: "localhost:6379"
      run: |
        echo "🔗 Running integration tests..."
        dotnet test ${{ inputs.solution_path }} \
          --filter "Category=Integration" \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=integration-tests.trx"

        echo "✅ Integration tests completed"

    - name: 📊 Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ github.sha }}
        path: "**/integration-tests.trx"
        retention-days: 30

  # ========================================
  # Job 5: Contract Tests (If Enabled)
  # ========================================
  contract-tests:
    name: 📜 Contract Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    if: ${{ inputs.enable_contract_tests }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET Environment
      uses: marcelpiva-org/maestroai-github-actions/actions/setup-dotnet@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        solution_path: ${{ inputs.solution_path }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}

    - name: 📜 Run Contract Tests (Pact)
      run: |
        echo "📜 Running contract tests..."
        # Add Pact contract testing here
        echo "✅ Contract tests completed"

  # ========================================
  # Job 6: Build Multi-Arch Containers
  # ========================================
  build-amd64:
    name: 🐳 Build AMD64 Container
    runs-on: ubuntu-latest
    needs: [setup-dependencies, build-solution, unit-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker Container
      uses: marcelpiva-org/maestroai-github-actions/actions/docker-build@main
      with:
        registry: ${{ env.REGISTRY }}
        image_name: ${{ env.IMAGE_NAME }}
        tag: ${{ needs.setup-dependencies.outputs.tag }}
        architecture: amd64
        github_token: ${{ secrets.GITHUB_TOKEN }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}
        registry_username: marcelpiva-org

  build-arm64:
    name: 🐳 Build ARM64 Container
    runs-on: ubuntu-latest
    needs: [setup-dependencies, build-solution, unit-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker Container
      uses: marcelpiva-org/maestroai-github-actions/actions/docker-build@main
      with:
        registry: ${{ env.REGISTRY }}
        image_name: ${{ env.IMAGE_NAME }}
        tag: ${{ needs.setup-dependencies.outputs.tag }}
        architecture: arm64
        github_token: ${{ secrets.GITHUB_TOKEN }}
        packages_token: ${{ secrets.PACKAGES_TOKEN }}
        registry_username: marcelpiva-org

  # ========================================
  # Job 7: Create Multi-Arch Manifest
  # ========================================
  create-manifest:
    name: 📦 Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [setup-dependencies, build-amd64, build-arm64]
    if: always() && (needs.build-amd64.result == 'success' || needs.build-arm64.result == 'success')

    steps:
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Create and push multi-arch manifest
      run: |
        IMAGES=""
        if [[ "${{ needs.build-amd64.result }}" == "success" ]]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}-amd64"
          echo "✅ AMD64 image available"
        fi
        if [[ "${{ needs.build-arm64.result }}" == "success" ]]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}-arm64"
          echo "✅ ARM64 image available"
        fi

        if [[ -n "$IMAGES" ]]; then
          echo "📦 Creating multi-arch manifest..."
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-latest \
            $IMAGES

          echo "✅ Multi-arch manifest created"
        else
          echo "❌ No images available"
          exit 1
        fi

  # ========================================
  # Job 8: Security Tier Detection
  # ========================================
  check-security-tier:
    name: 🔒 Check Security Tier
    runs-on: ubuntu-latest
    needs: [setup-dependencies, create-manifest]
    if: always() && needs.create-manifest.result == 'success'
    outputs:
      has-advanced-security: ${{ steps.check.outputs.has_advanced_security }}

    steps:
    - name: 🔍 Check if repository has Advanced Security
      id: check
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        is_public=$(gh api "/repos/${{ github.repository }}" --jq '.private' | grep -q 'false' && echo "true" || echo "false")

        if [ "$is_public" = "true" ]; then
          echo "has_advanced_security=true" >> $GITHUB_OUTPUT
          echo "✅ Public repository - Advanced Security available"
        else
          echo "has_advanced_security=false" >> $GITHUB_OUTPUT
          echo "⚠️  Private repository - Advanced Security requires GitHub Team/Enterprise"
        fi

  # ========================================
  # Job 9: Trivy Container Scan
  # ========================================
  trivy-scan:
    name: 🔒 Trivy Container Scan
    runs-on: ubuntu-latest
    needs: [setup-dependencies, create-manifest, check-security-tier]
    if: always() && needs.create-manifest.result == 'success'
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy scan
      uses: marcelpiva-org/maestroai-github-actions/actions/trivy-scan@main
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit_code: '0'
        format: 'sarif'
        output_file: 'trivy-results.sarif'
        upload_sarif: ${{ needs.check-security-tier.outputs.has-advanced-security }}
        registry_username: ${{ github.actor }}
        registry_password: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # Job 10: Deploy to Dev Environment
  # ========================================
  deploy-to-dev:
    name: 🚀 Deploy to Dev
    runs-on: ubuntu-latest
    needs: [setup-dependencies, create-manifest, trivy-scan]
    if: ${{ inputs.deploy_to_dev && needs.create-manifest.result == 'success' }}

    steps:
    - name: 📥 Checkout infrastructure repo
      uses: actions/checkout@v4
      with:
        repository: marcelpiva-org/maestroai-infrastructure
        token: ${{ secrets.PACKAGES_TOKEN }}
        path: infrastructure

    - name: 📝 Update Dev deployment manifest
      run: |
        cd infrastructure

        echo "📝 Updating ${{ inputs.service_name }} deployment in Dev environment..."

        # Update image tag in ArgoCD application
        sed -i "s|image: .*maestro-${{ inputs.service_name }}-app:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}|g" \
          k8s/overlays/dev/${{ inputs.service_name }}/deployment.yaml || true

        echo "✅ Manifest updated"

    - name: 🚀 Commit and push changes
      run: |
        cd infrastructure

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add .
        git commit -m "chore(dev): update ${{ inputs.service_name }} to ${{ needs.setup-dependencies.outputs.tag }}

        Automated deployment from develop branch

        🤖 Generated with [Claude Code](https://claude.com/claude-code)" || {
          echo "ℹ️  No changes to commit"
          exit 0
        }

        git push

    - name: 🔄 Trigger ArgoCD Sync
      run: |
        echo "🔄 ArgoCD will automatically detect changes and sync within 3 minutes"
        echo "📍 Application: maestroai-${{ inputs.service_name }}-dev"
        echo "🌐 URL: https://${{ inputs.service_name }}-dev.maestroai"

    - name: 🧪 Run Smoke Tests
      run: |
        echo "🧪 Waiting for deployment to stabilize..."
        sleep 30

        echo "🔍 Running smoke tests..."
        curl -f -s "https://${{ inputs.service_name }}-dev.maestroai/health/live" || {
          echo "❌ Smoke test failed - service not responding"
          exit 1
        }

        echo "✅ Smoke tests passed"

  # ========================================
  # Job 11: Summary
  # ========================================
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [setup-dependencies, build-solution, unit-tests, integration-tests, create-manifest, trivy-scan, deploy-to-dev]
    if: always()

    steps:
    - name: 📊 Generate Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🚀 CI Complete - Develop Branch

        **Service**: \`${{ inputs.service_name }}\`
        **Tag**: \`${{ needs.setup-dependencies.outputs.tag }}\`
        **Version**: \`${{ needs.setup-dependencies.outputs.version }}\`

        ### ✅ Pipeline Results

        | Stage | Status | Duration |
        |-------|--------|----------|
        | 🔧 Setup | ${{ needs.setup-dependencies.result == 'success' && '✅' || '❌' }} | ~30s |
        | 🏗️ Build | ${{ needs.build-solution.result == 'success' && '✅' || '❌' }} | ~1min |
        | 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '⏭️' }} | ~2min |
        | 🔗 Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '⏭️' }} | ~3min |
        | 🐳 Containers (AMD64 + ARM64) | ${{ needs.create-manifest.result == 'success' && '✅' || '❌' }} | ~5min |
        | 🔒 Security Scan | ${{ needs.trivy-scan.result == 'success' && '✅' || '❌' }} | ~2min |
        | 🚀 Deploy to Dev | ${{ needs.deploy-to-dev.result == 'success' && '✅' || '⏭️' }} | ~2min |

        **Total Duration**: ~15-20min

        ### 🐳 Container Images

        - **AMD64**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}-amd64\`
        - **ARM64**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}-arm64\`
        - **Multi-Arch**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup-dependencies.outputs.tag }}\`
        - **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-latest\`

        ### 🌐 Dev Environment

        **URL**: https://${{ inputs.service_name }}-dev.maestroai
        **ArgoCD**: maestroai-${{ inputs.service_name }}-dev

        ---

        <sub>🤖 Generated by CI Complete Pipeline</sub>
        EOF

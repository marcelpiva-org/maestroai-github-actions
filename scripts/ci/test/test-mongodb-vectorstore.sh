#!/bin/bash

# Script para testar MongoDB Vector Search como prim√°rio e Milvus como secund√°rio

echo "üß™ Testando configura√ß√£o MongoDB Vector Search (prim√°rio) + Milvus (secund√°rio)"
echo "=================================================================="

# Verificar se MongoDB est√° rodando
echo "1Ô∏è‚É£ Verificando MongoDB..."
if ! command -v mongosh &> /dev/null; then
    echo "‚ùå MongoDB CLI (mongosh) n√£o encontrado. Instalando..."
    # Opcionalmente instalar mongosh
    echo "‚ÑπÔ∏è  Por favor, instale MongoDB e mongosh primeiro"
fi

# Verificar se MongoDB est√° rodando na porta 27017
if nc -z localhost 27017 2>/dev/null; then
    echo "‚úÖ MongoDB est√° rodando na porta 27017"
else
    echo "‚ùå MongoDB n√£o est√° rodando na porta 27017"
    echo "üí° Para iniciar MongoDB: brew services start mongodb/brew/mongodb-community"
    echo "üí° Ou usando Docker Compose: docker-compose up mongodb"
    echo "üí° Ou Docker standalone: docker run -d -p 27017:27017 --name mongodb mongo:latest"
fi

# Verificar se Milvus est√° rodando
echo "2Ô∏è‚É£ Verificando Milvus..."
if nc -z localhost 19530 2>/dev/null; then
    echo "‚úÖ Milvus est√° rodando na porta 19530"
else
    echo "‚ùå Milvus n√£o est√° rodando na porta 19530"
    echo "üí° Para iniciar Milvus: docker run -p 19530:19530 milvusdb/milvus:latest standalone"
fi

# Verificar configura√ß√£o do appsettings.json
echo "3Ô∏è‚É£ Verificando configura√ß√£o..."
if grep -q '"Provider": "MongoDB"' /Users/marcelpiva/Projects/NAVA/MaestroAI/server/appsettings.json; then
    echo "‚úÖ MongoDB configurado como provider prim√°rio"
else
    echo "‚ùå MongoDB n√£o est√° configurado como provider prim√°rio"
fi

if grep -q '"SecondaryProvider": "Milvus"' /Users/marcelpiva/Projects/NAVA/MaestroAI/server/appsettings.json; then
    echo "‚úÖ Milvus configurado como provider secund√°rio"
else
    echo "‚ùå Milvus n√£o est√° configurado como provider secund√°rio"
fi

if grep -q '"EnableDualWrite": true' /Users/marcelpiva/Projects/NAVA/MaestroAI/server/appsettings.json; then
    echo "‚úÖ Dual Write habilitado"
else
    echo "‚ùå Dual Write n√£o est√° habilitado"
fi

# Compilar e testar o servidor
echo "4Ô∏è‚É£ Compilando servidor..."
cd /Users/marcelpiva/Projects/NAVA/MaestroAI/server

if dotnet build MaestroAI.Server.csproj --no-restore > /dev/null 2>&1; then
    echo "‚úÖ Compila√ß√£o bem-sucedida"
else
    echo "‚ùå Falha na compila√ß√£o"
    echo "üîß Executando build com output completo:"
    dotnet build MaestroAI.Server.csproj
    exit 1
fi

# Testar health check dos vector stores
echo "5Ô∏è‚É£ Testando Vector Store Health..."
echo "üöÄ Iniciando servidor para teste de sa√∫de..."

# Testar usando o servidor do Docker Compose que j√° est√° rodando
echo "üîó Testando servidor do Docker Compose (porta 5001)..."

# Testar endpoint de health check
if curl -s http://localhost:5001/health/vectorstore > /dev/null 2>&1; then
    echo "‚úÖ Health check do vector store funcionando"

    # Mostrar resultado do health check
    echo "üìä Status dos Vector Stores:"
    curl -s http://localhost:5001/health/vectorstore | jq . 2>/dev/null || curl -s http://localhost:5001/health/vectorstore
else
    echo "‚ùå Health check do vector store falhou"
    echo "üí° Verificando se o servidor Docker Compose est√° rodando..."
    if curl -s http://localhost:5001/health > /dev/null 2>&1; then
        echo "‚úÖ Servidor rodando, mas vector store com problemas"
        curl -s http://localhost:5001/health/vectorstore
    else
        echo "‚ùå Servidor Docker Compose n√£o est√° rodando"
        echo "üí° Execute: docker-compose up -d"
    fi
fi

# Testar persist√™ncia de dados
echo ""
echo "6Ô∏è‚É£ Verificando persist√™ncia de dados..."

# Verificar collections no MongoDB
echo "üîç Verificando collections no MongoDB:"
if docker exec maestro-mongodb mongosh "mongodb://maestro:maestro123@localhost:27017/maestro_vectors?authSource=maestro_vectors" --eval "db.vector_embeddings.countDocuments()" 2>/dev/null; then
    echo "‚úÖ Conex√£o MongoDB funcionando"
    echo "üìä Documentos na collection vector_embeddings:"
    docker exec maestro-mongodb mongosh "mongodb://maestro:maestro123@localhost:27017/maestro_vectors?authSource=maestro_vectors" --eval "
        print('Total de documentos:', db.vector_embeddings.countDocuments());
        print('√öltimos 3 documentos:');
        db.vector_embeddings.find().limit(3).forEach(doc => {
            print('ID:', doc._id);
            print('Content (preview):', doc.content.substring(0, 100) + '...');
            print('Source:', doc.metadata.source);
            print('Type:', doc.metadata.type);
            print('---');
        });
    " 2>/dev/null
else
    echo "‚ùå N√£o foi poss√≠vel conectar ao MongoDB"
fi

echo ""
echo "üîç Como verificar dados manualmente:"
echo "   - MongoDB: docker exec -it maestro-mongodb mongosh 'mongodb://maestro:maestro123@localhost:27017/maestro_vectors?authSource=maestro_vectors'"
echo "   - Query: db.vector_embeddings.find().pretty()"
echo "   - Count: db.vector_embeddings.countDocuments()"

echo ""
echo "=================================================================="
echo "üéØ Configura√ß√£o MongoDB (prim√°rio) + Milvus (secund√°rio) testada!"
echo "üìù Para usar:"
echo "   - MongoDB ser√° usado para todas as escritas prim√°rias"
echo "   - Milvus receber√° c√≥pias dos dados (dual write)"
echo "   - Em caso de falha do MongoDB, failover para Milvus"
echo "   - Use /health/vectorstore para monitorar status"
echo "   - Dados persistidos em: mongodb://maestro:maestro123@localhost:27017/maestro_vectors"